**** BINARY SEARCH ****
The objective is to find values in a range quickly. Good when we have sorted things, or things with constraints / we can create a range to search within.

let l = 0;
let r = nums.length;
while (l < r) {
  const m = Math.floor((r + l) / 2);
  ...
}

Using .floor errs left. In general, when doing l < r, we want to set l=m+1, and r=m, to always shrink the window. What we exactly do depends on the problem. For instance if we are looking for the first instance of `5`, and we see a 5 in a sorted array, r=m makes sense, because we want to include the `5` we saw in the range, but still look left for an earlier 5.

When doing l <=r, we can do l=m+1, r=m-1.

To know how to set l and r, just think that the binary search is eliminating numbers. Consider [1, 2, 3] with l, m, and r set accordingly. If our middle pointer is too big, or equal to the target, we need to search left. But since it could equal the target, we should consider m still, so r=m. If our middle pointer is strictly too small, we can search all values on the right of it, so l = m + 1.

We also can do l<=r, like in problem 1898, to run the verification process on the final narrowed down value as well. But this only works because we can't end up in between two values, for instance if removables is [1, 3] we cannot end up between removing [1] and removing both [1,3]. We would either land on one of them, or get pushed out all the way to the left (-1). Whereas in a simple binary search (look for a number, return index or -1 if not found), it's possible to have: [3, 7, 10] target=5 and we end up with r pointing at 3 and l pointing to 7, but we didn't get pushed out the side of the search range to -1.

If we are using the floor, we can never set l=m, because that won't compress a window of 2. We must use a ceiling. If we are using a ceiling, we can never set r=m, as it won't compress, we must use r=m-1. 23: Find First and Last Position of Element in Sorted array showcases using both. It also sometimes may be easier to use 3 cases, nums[m]<target, equals, and greater than, and set the windows accordingly.

Another thing we can do (such as neetcode did in problem 2300 spells and potions), is make a variable that captures a value on every iteration of the binary search. An idx variable, so we don't have to worry about handling l or r, we can just grab the relevant value whenever we find a success.

When we do l<=r, r can end at relevant info. For instance in 1889, we use l<=r and we are looking for the biggest number smaller than a certain number. r would also be set to index -1 if there was no number that satisfied the condition. I think trying to assign cases to use l<r or l<=r or anything is not well designed, it's better to adapt on the fly based on the problem.


A way to do binary search for calculating a square is either:

1)
If exponent is even, half it. So 2^50 = 2^25 * 2^25.
If it is odd, decrement by one, so 2^49 = 2 * 2^48. We would at most do this 1 time per number and we half every other time, so still log n.

2)
Exponential squaring:
3^16 = (3^2)^8
3^15 = 3*3^14