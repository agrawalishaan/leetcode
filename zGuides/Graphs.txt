Matrix DFS / BFS:

Some pro tips, we can check in bounds like:

for (const [rowDiff, colDiff] of diffs) {
  const newRow = r + rowDiff;
  const newCol = c + colDiff;
  if (newRow < HEIGHT && newRow >= 0 && newCol < WIDTH && newCol >= 0 && !visited[newRow][newCol] && grid[newRow][newCol] === 1) {
      total += sizeOfIsland(newRow, newCol);
  }
}

If we don't want a huge matrix to store visited/unvisited cells, we could use a set and make keys by WIDTH*row + col. This isn't necessarily more efficient though, it depends how many keys we store. It is also slower to access. It's also harder to convert keys back and forth.

In problem 417: Pacific Atlantic Water Flow, there were a few lessons.
1) Consideer iterating from outside the cells (the edges) instead of inside.
2) Assuming we can flow from equal height cells, we need a visited set. This prevents us from caching things well though, because in:
5 5 5 5
5 3 3 1
5 5 5 5

If we solve for the second 3, we might recurse to the first 3. And the first 3 cannot flow out, because the second 3 is marked as visited. But the first 3 can actually flow out. So here, we only end up really solving for the root, and anything along it's path to the edge.
The problem itself has a good detailed explanation.

I think that between pacific atlantic water flow, and trapping rainwater II, I've seen that if we need to flow out of a cell, we can only check root cells + cells along their flow path. And finding the bottleneck height seems very hard.

In 695: Max Area of Island, we can either not recurse to invalid adjacent cells at all, or recurse to them, then return 0 if they are invalid. IMO the first is more intuitive, but many people do the second. It is similar to backtracking, just do whatever feels more natural.

In problem 695, we also don't need to set cells to be unvisited later. Since we're just trying to visit everything once, rather than find a path, we only need to set them to true.

In 827, making a large island (we can flip one water tile, find largest island), I tried writing code where we could recurse to invalid neighbors, then terminate via base cases, just for practice. Actually I think it was a bit easier.

In BFS, if we start from the top left of some island and are finding the area, or generally expanding out (for instance finding the shortest path from the top left cell to the bottom right, with walls), our queue size is limited to min(n,m), since in the worst case our queue expands as a diagonal (draw a picture of the bfs for a square matrix to see this). This can be seen in questions: 1091, shortest path in binary matrix, or 200: number of islands. I think most of these types of questions could use less space this way, since queue size is limited.