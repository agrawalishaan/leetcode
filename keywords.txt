learning purposes = review a concept or walkthrough a problems
difficulty = leetcode problem difficulty
modfications = slightly different ways to think about or implement a solution
helper = shows if this problem helps explain another problem, or uses a helper problem

Sometimes problems may be in their folders but not have the relevant tag.

tags:
acyclic
arrays (sometimes used when we don't put a problem in the array category but it still has a lot of array/hashing work)
anagram (good tag for yeetcode but haven't used thus far)
avl tree
backtracking
beats 100%
bfs
binary search
binary tree
bit manipulation
bit mask
bottom up recursion
boyer-moore (new tag)
bst [binary search tree]
bubble sort
bucket sort
circular
connected [for graphs]
contest (done in contest)
cyclic
digit dp
directed [for graphs]
deque
dfa (deterministc finite automaton)
dfs
djikstra
dynamic programming 1d
graph(s)
graphs with nodes (this means our graph takes the form of nodes and .neighbors, instead of for instance a matrix)
greedy - not really used for problems that aren't explicitly tagged greedy, since lots of problems use greedy methods but the focus is on another part of the problem
heap
inorder traversal
insertion sort
intervals
kadane's
lazy heap
lca
lcs (dp question, new tag I'm adding late)
lop off (this is for problems where we need to count pairs or subarrays and we use some prefix value and see how many / earliest one we can cut off, often the remainder questions)
math (I tag a lot of problems in the math folder with this but not sure I did all)
matrix bfs
matrix dfs
minimum spanning tree
monotonic deque
monotonic queue
monotonic stack
multibranch (recursive or iterative)
palindrome
prefix
preorder traversal
postfix
postorder traversal
recursion
rolling hash
quickselect
quicksort
queue
self balancing bst
single branch (recursive or iterative)
sliding window (fixed/variable)
simulation
slow and fast pointers
SQL
square root decomp
stack
state machine
sweep line
topological sort
top down recursion [with memoization]
tree(s)
trie
two pointers
unconnected [for graphs, means the graph can be unconnected]
undirected [for graphs]
union find
weighted (for graphs)
work backwards (new tag)