We can always assign parent pointers (or use a hashmap to not mutate the structure) if we need some sort of reverse accessibility. Same with linked lists. For instance in problem 863: All Nodes Distance K in Binary Tree. We can add parents, then recurse out from the main node, a distance of k.

If we serialize a tree and a subtree (tree has subtree w/ string matching problem), we can show the subtree string appears contiguously in the larger one. I mean once we enter the subtree to serialize we won't exit until we finish that tree.

If we do:
if not node: return

VS

if node.left: dfs(node.left)

the tradeoff is no functional overhead, but we also check the if condition every iteration now

LCA:

there is a REALLY brilliant solution for LCA of a binary tree (see lca of binary tree IV for more info, and some solutions in the solutions page). If we hit a node in the nodeset, we return that. If both left and right are needed, we return ourself. If only left or right is needed, we return that.