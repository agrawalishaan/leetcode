********** HEAP **********

A heap is implemented as an array. Each element in the heap is smaller than or equal to its children (for a min heap), or vice versa for a max heap. We usually keep the first element of the array as a dummy value to make counting easier, but there is a way to do it without that (2*i + 1 and 2*i + 2)

A heap must be a complete tree or we lose the log n time benefit. When we add to the heap, push the element to the end of the array. Then percolate up as long as the element is bigger or smaller than its parent. When we remove from the heap, grab the first element from the heap. Take our last element and substitute it in, then percolate down. We cannot just percolate down our root element and then remove it, because we get a hole. If we try to fill this hole with our last element, the heap may no longer be valid.

            7
          /  \
         6    4

         consider this max heap. If we delete 7, then recursively try to fill the hole:


          /\
         6  4

         4
        /
       6

       Then replace the hole with our last heap element:

       4
        \
         6

        We don't have a valid heap anymore (this example is more clear in a bigger heap).


      Instead, we should take the 4, make it the root, then percolate down.


To heapify an array, we start iterate from the last element that does have a child (we could run the algorithm on all elements instead, and just skip over the ones that don't have children). For each element, percolate it down as much as needed. It appears to be n log n time, but you can prove the time is O(n) because the initial rows have a smaller height than the later rows. Note this is with sifting down. If we try to heapify something by adding n elements to a heap, and sifting them up as needed, the time complexity becomes n log n because the leaf nodes will take worst case log n time. So it is better to start at the leaves, and sift down, than start at the leaves and sift up.

In problem 973, we have to track the K closest elements to the origin. Instead of maintaining a min heap which might intuitively sound right, we actuall need a max heap. This is because we will track the k smallest elements, but have quick access to the largest of those. Then, when we exceed the size and pop, we can remove the root/largest element.

2462: Total Cost to Hire K Workers, has a way better heap implementation for sift down.